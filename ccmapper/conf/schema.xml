<?xml version="1.0" encoding="UTF-8" ?>
<!-- field names should consist of alphanumeric or underscore characters only and
    not start with a digit.  This is not currently strictly enforced,
    but other field names will not have first class support from all components
    and back compatibility is not guaranteed.  Names with both leading and
    trailing underscores (e.g. _version_) are reserved.
 -->
<schema name="ccmapper" version="1.5">

  <!-- =========================== GENERAL STUFF ============================================= -->

  <uniqueKey>id</uniqueKey>
  <field name="_version_" type="long" indexed="true" stored="true"/>
  <field name="_root_" type="string" indexed="true" stored="false"/>

  <!--
      Main body of document extracted by SolrCell.
      NOTE: This field is not indexed by default, since it is also copied to "text"
      using copyField below. This is to save space. Use this field for returning and
      highlighting document content. Use the "text" field to search the content.
  -->
  <field name="content" type="text_general" indexed="false" stored="true" multiValued="true"/>

  <!-- =========================== CCMAPPER FIELDS ============================================= -->

  <field name="id" type="string" indexed="true" stored="true" multiValued="false"/>

  <!-- multiValued="true" because of the USVD vocabulary, which have multiple notations per entry -->
  <field name="notation" type="string" indexed="true" stored="true" multiValued="true"/>

  <field name="vocabulary" type="string" indexed="true" stored="true" multiValued="false"/>

  <field name="prefLabel" type="text_no" indexed="true" stored="true" multiValued="true" termVectors="true"/>
  <field name="altLabel" type="text_no" indexed="true" stored="true" multiValued="true" termVectors="true"/>
  <field name="variantName" type="text_no" indexed="true" stored="true" multiValued="true" termVectors="true"/>
  <field name="formerName" type="text_no" indexed="true" stored="true" multiValued="true" termVectors="true"/>
  <field name="definition" type="text_no" indexed="true" stored="true" multiValued="true" termVectors="true"/>
  <field name="scopeNote" type="text_no" indexed="true" stored="true" multiValued="true" termVectors="true"/>
  <field name="editorialNote" type="text_no" indexed="true" stored="true" multiValued="true" termVectors="true"/>
  <field name="classHere" type="text_no" indexed="true" stored="true" multiValued="true" termVectors="true"/>
  <field name="including" type="text_no" indexed="true" stored="true" multiValued="true" termVectors="true"/>

  <field name="parentsLevel1" type="text_no" indexed="true" stored="true" multiValued="true" termVectors="true"/>
  <field name="parentsLevel2" type="text_no" indexed="true" stored="true" multiValued="true" termVectors="true"/>
  <field name="parentsLevel3" type="text_no" indexed="true" stored="true" multiValued="true" termVectors="true"/>

  <field name="paths" type="ancestor_path" indexed="true" stored="true" multiValued="true"/>


  <!--
      A field to support "starts with" searches/boosting.
      Currently by keeping the first word only, but to support multi-word searches,
      we could perhaps instead keep the whole value, but pad it with "^",
      so we can search for "^some value" ?
  -->
  <field name="startsWith" type="first_word" indexed="true" stored="true" multiValued="true" termVectors="true"/>
  <copyField source="prefLabel" dest="startsWith"/>
  <copyField source="altLabel" dest="startsWith"/>
  <copyField source="variantName" dest="startsWith"/>
  <copyField source="classHere" dest="startsWith"/>


  <!--
      A field that holds the exact form of the most important fields,
      so we can boost exact matches when querying
  -->
  <field name="exactMatch" type="lowercase" indexed="true" stored="true" multiValued="true" termVectors="true"/>
  <copyField source="prefLabel" dest="exactMatch"/>
  <copyField source="altLabel" dest="exactMatch"/>
  <copyField source="variantName" dest="exactMatch"/>
  <copyField source="classHere" dest="exactMatch"/>

  <!--
      Catchall field, containing all other searchable text fields (implemented
      via copyField further on in this schema
  -->
  <field name="text" type="text_general" indexed="true" stored="false" multiValued="true"/>
  <copyField source="prefLabel" dest="text"/>
  <copyField source="altLabel" dest="text"/>
  <copyField source="variantName" dest="text"/>
  <copyField source="definition" dest="text"/>
  <copyField source="scopeNote" dest="text"/>
  <copyField source="classHere" dest="text"/>
  <copyField source="including" dest="text"/>

  <!--
      Catchall text field that indexes tokens both normally and in reverse for efficient
      leading wildcard queries.
  -->
  <field name="text_rev" type="text_general_rev" indexed="true" stored="false" multiValued="true"/>
  <copyField source="prefLabel" dest="text_rev"/>
  <copyField source="altLabel" dest="text_rev"/>
  <copyField source="variantName" dest="text_rev"/>
  <copyField source="definition" dest="text_rev"/>
  <copyField source="scopeNote" dest="text_rev"/>
  <copyField source="classHere" dest="text_rev"/>
  <copyField source="including" dest="text_rev"/>

  <!-- ========================= FIELD TYPE DEFINITIONS =========================================== -->

  <!--
      The StrField type is not analyzed, but indexed/stored verbatim.
      It supports doc values but in that case the field needs to be
      single-valued and either required or have a default value.
  -->
  <fieldType name="string" class="solr.StrField" />

  <!--
    Default numeric field types. For faster range queries, consider the tint/tfloat/tlong/tdouble types.
  -->
  <fieldType name="int" class="solr.TrieIntField" precisionStep="0" positionIncrementGap="0"/>
  <fieldType name="float" class="solr.TrieFloatField" precisionStep="0" positionIncrementGap="0"/>
  <fieldType name="long" class="solr.TrieLongField" precisionStep="0" positionIncrementGap="0"/>
  <fieldType name="double" class="solr.TrieDoubleField" precisionStep="0" positionIncrementGap="0"/>

  <!--
      solr.TextField allows the specification of custom text analyzers
      specified as a tokenizer and a list of token filters. Different
      analyzers may be specified for indexing and querying.

      The optional positionIncrementGap puts space between multiple fields of
      this type on the same document, with the purpose of preventing false phrase
      matching across fields.

      For more info on customizing your analyzer chain, please see
      http://wiki.apache.org/solr/AnalyzersTokenizersTokenFilters
  -->

  <!--
      A text field that only splits on whitespace for exact matching of words
  -->
  <fieldType name="text_ws" class="solr.TextField" positionIncrementGap="100">
    <analyzer>
      <tokenizer class="solr.WhitespaceTokenizerFactory"/>
    </analyzer>
  </fieldType>

  <!--
      Extracts the first word
  -->
  <fieldType name="first_word" class="solr.TextField" positionIncrementGap="100">
    <analyzer>
      <tokenizer class="solr.KeywordTokenizerFactory"/>
      <filter class="solr.LowerCaseFilterFactory" />
      <charFilter class="solr.PatternReplaceCharFilterFactory" pattern="^([^ ]*).*$" replacement="$1"/>
    </analyzer>
  </fieldType>

  <!--
      lowercases the entire field value, keeping it as a single token.
  -->
  <fieldType name="lowercase" class="solr.TextField" positionIncrementGap="100">
    <analyzer>
      <tokenizer class="solr.KeywordTokenizerFactory"/>
      <filter class="solr.LowerCaseFilterFactory" />
    </analyzer>
  </fieldType>

  <!--
      A general text field that has reasonable, generic cross-language defaults:
      it tokenizes with StandardTokenizer, removes stop words from case-insensitive
      "stopwords.txt" (empty by default), and down cases.  At query time only, it
      also applies synonyms.
  -->
  <fieldType name="text_general" class="solr.TextField" positionIncrementGap="100">
    <analyzer type="index">
      <tokenizer class="solr.StandardTokenizerFactory"/>
      <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt" />
      <!-- in this example, we will only use synonyms at query time
      <filter class="solr.SynonymFilterFactory" synonyms="index_synonyms.txt" ignoreCase="true" expand="false"/>
      -->
      <filter class="solr.LowerCaseFilterFactory"/>
    </analyzer>
    <analyzer type="query">
      <tokenizer class="solr.StandardTokenizerFactory"/>
      <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt" />
      <!--  <filter class="solr.SynonymFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="true"/>-->
      <filter class="solr.LowerCaseFilterFactory"/>
    </analyzer>
  </fieldType>

  <!--
      Just like text_general except it reverses the characters of
      each token, to enable more efficient leading wildcard queries.
  -->
  <fieldType name="text_general_rev" class="solr.TextField" positionIncrementGap="100">
    <analyzer type="index">
      <tokenizer class="solr.StandardTokenizerFactory"/>
      <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt" />
      <filter class="solr.LowerCaseFilterFactory"/>
      <filter class="solr.ReversedWildcardFilterFactory" withOriginal="true"
         maxPosAsterisk="3" maxPosQuestion="2" maxFractionAsterisk="0.33"/>
    </analyzer>
    <analyzer type="query">
      <tokenizer class="solr.StandardTokenizerFactory"/>
      <!--<filter class="solr.SynonymFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="true"/>-->
      <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt" />
      <filter class="solr.LowerCaseFilterFactory"/>
    </analyzer>
  </fieldType>

  <!--
      Norwegian
      From: http://svn.apache.org/repos/asf/lucene/dev/branches/lucene_solr_3_6/solr/example/solr/conf/schema.xml
  -->
  <fieldType name="text_no" class="solr.TextField" positionIncrementGap="100">
    <analyzer>
      <tokenizer class="solr.StandardTokenizerFactory"/>
      <filter class="solr.LowerCaseFilterFactory"/>
      <filter class="solr.StopFilterFactory" ignoreCase="true" words="lang/stopwords_no.txt" format="snowball" />
      <filter class="solr.StopFilterFactory" ignoreCase="true" words="lang/stopwords_ccmapper.txt" format="snowball" />
      <filter class="solr.SnowballPorterFilterFactory" language="Norwegian"/>
      <!-- less aggressive: <filter class="solr.NorwegianLightStemFilterFactory"/> -->
      <!-- singular/plural: <filter class="solr.NorwegianMinimalStemFilterFactory"/> -->
      <!--<filter class="solr.NorwegianMinimalStemFilterFactory"/>-->
    </analyzer>
  </fieldType>

  <!--
      Example of using PathHierarchyTokenizerFactory at index time, so
      queries for paths match documents at that path, or in descendent paths
  -->
  <fieldType name="descendent_path" class="solr.TextField">
    <analyzer type="index">
      <tokenizer class="solr.PathHierarchyTokenizerFactory" delimiter="/" />
    </analyzer>
    <analyzer type="query">
      <tokenizer class="solr.KeywordTokenizerFactory" />
    </analyzer>
  </fieldType>

  <!--
    Example of using PathHierarchyTokenizerFactory at query time, so
    queries for paths match documents at that path, or in ancestor paths
  -->
  <fieldType name="ancestor_path" class="solr.TextField">
    <analyzer type="index">
      <tokenizer class="solr.KeywordTokenizerFactory" />
    </analyzer>
    <analyzer type="query">
      <tokenizer class="solr.PathHierarchyTokenizerFactory" delimiter="/" />
    </analyzer>
  </fieldType>

  <!--
      since fields of this type are by default not stored or indexed,
      any data added to them will be ignored outright.
  -->
  <fieldType name="ignored" stored="false" indexed="false" multiValued="true" class="solr.StrField" />

</schema>
